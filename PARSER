Parsing Grammars - PG
---------------------

  ()              Empty string, always succeeds.
  a               Terminal, consume and succeed.
  A               Non-terminal, recurse and succeed.
  e1,e2, ...en    Sequence, e1 and e2 ...
  e1/e2/.../en    Choice, e1 or e2 ...
  e*              Greedy repetition, always succeeds.
  e+              Greedy positive repetition.
  e?              Optional.
  &(e)            Positive lookahead, succeed in presence of e but do not consume e.
  !(e)            Negative lookahead, succeed in absence of e but do not consume e.

Grammar Grammar:

  Grammar        <-- Spacing Definition+ EOF
  Definition     <-- Identifier LEFTARROW Sequence DEFTERMINATOR
  Sequence       <-- Alternative (SLASH Alternative)*
  Alternative    <-- AND UnaryItem / NOT UnaryItem / UnaryItem
  UnaryItem      <-- PrimaryItem QUESTION / PrimaryItem STAR / PrimaryItem PLUS / PrimaryItem
  PrimaryItem    <-- Identifier / CharLiteral / StringLiteral / OPEN Sequence CLOSE
  Identifier     <-- IdentStart IdentCont* Spacing
  IdentStart     <-- Alpha / '_'
  IdentCont      <-- IdentStart / Digit / '''
  CharLiteral    <-- ''' (!(''') QuotedChar) ''' Spacing
  StringLiteral  <-- '"' (!('"') QuotedChar)* '"' Spacing
  QuotedChar     <-- '\n' / '\r' / '\t' / '\\' / '\'' / '\"' / !('\') Char
  Spacing        <-- (SpaceChar / LineComment)*
  SpaceChar      <-- ' ' / TAB / CR / LF
  LineComment    <-- '#' (!(LineTerminator) Char)* LineTerminator
  LineTerminator <-- CR LF / CR / LF
  CR             <-- '\r'
  LF             <-- '\n'
  TAB            <-- '\t'
  EOF            <-- !(Char)
  AND            <-- '&' Spacing
  NOT            <-- '!' Spacing
  QUESTION       <-- '?' Spacing
  STAR           <-- '*' Spacing
  PLUS           <-- '+' Spacing
  LEFTARROW      <-- '<--' Spacing
  OPEN           <-- '(' Spacing
  CLOSE          <-- ')' Spacing
  SLASH          <-- '/' Spacing
  DEFTERMINATOR  <-- ';' Spacing

  Built-ins:
    Alpha
    Digit
    Char

Grammar example:

  Additive       <-- Multiplicative ('+' / '-') Additive / Multiplicative
  Multiplicative <-- Primary ('*' / '/') Multitive / Primary
  Primary        <-- '(' Additive ')' / Number
  Number         <-- '0' / '1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9'

Consider possible directive:

  - caseless
  - abbreviated

Combine whitespace recognition in the grammar and avoid tokenization.

Combine parser with SAX callouts to build parse tree.

Memoize:
  - isMatch (grammar, input, position, rule)

---
